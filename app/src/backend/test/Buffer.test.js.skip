const { expect } = require("chai");

const toWei = (num) => ethers.utils.parseEther(num.toString())
const fromWei = (num) => ethers.utils.formatEther(num)
const printGasFee = (fnName, rc) => {
	const gasFee = rc.gasUsed * rc.effectiveGasPrice
	console.log(fnName + " gas fee:", ethers.utils.formatEther(gasFee), "ETH");
};
const baseContractPath = "./src/backend/contracts/";

describe("Buffer", function () {
	let GroupFactory;
	let groupFactory;
	let Buffer;
	let buffer;
	let signers;
	let deployer;
	let addrs;

	runTxAndPrintGasFee = async (txPromise, fnName) => {
		const tx = await txPromise;
		const rc = await tx.wait();
		printGasFee(fnName, rc);
	}

	beforeEach(async function () {
		console.log("****TESTING NOW*******");
		console.log("baseContractPath:", baseContractPath);

		signers = await ethers.getSigners();
		[deployer, ...addrs] = signers;
		GroupFactory = await ethers.getContractFactory(baseContractPath + "splitter/GroupFactory.sol:Factory");
		groupFactory = await GroupFactory.deploy();

		Buffer = await ethers.getContractFactory(baseContractPath + "splitter/Buffer.sol:Buffer");
		buffer = await Buffer.deploy();

		const tx = await groupFactory.genesis("Royalties Distributor", deployer.address);
		const rc = await tx.wait();
		const event = rc.events.find(event => event.event === 'ContractDeployed');
		const [, group] = event.args;
		buffer = await buffer.attach(group);
	});

	describe("Mint/Sale/Withdraw", function () {
		it("Should let withdraw/donate shares after receiving mint/sale payments", async function () {
			const coreTeam = addrs.slice(0, 10);
			const percents = [2000, 2000, 2000, 2000, 2000, 1000, 2000, 3000, 1000, 3000]
			const c_TeamPercs = [1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000];
			const artists = addrs.slice(10, 15);
			const buyers = addrs.slice(15, 20);
			const donateTo = buyers[3];
			const nftIds = [
				[1, 2, 3, 4, 5],
				[6, 7, 8, 9, 10],
				[11, 12, 13, 14, 15],
				[16, 17, 18, 19, 20],
				[21, 22, 23, 24, 25]
			];

			const initCoreTeamAndArtists = async () => {
				await runTxAndPrintGasFee(buffer.setPercentsAndAddCoreTeam(percents, coreTeam.map(a => a.address), c_TeamPercs), "setPercentsAndAddCoreTeam");
				await runTxAndPrintGasFee(buffer.addArtistsAndNFTs(artists.map(a => a.address), nftIds), "addArtistsAndNFTs");
			}
			const mintsAndSales = async () => {
				await runTxAndPrintGasFee(buffer.receiveMintPayment(1, artists[0].address, buyers[0].address, { value: toWei(0.01) }), "receiveMintPayment");
				await runTxAndPrintGasFee(buffer.receiveMultiMintPayment([2, 6, 7], [artists[0].address, artists[1].address, artists[1].address], buyers[1].address, { value: toWei(0.03) }), "receiveMultiMintPayment");
				await runTxAndPrintGasFee(buffer.receiveSalePayment(1, buyers[0].address, buyers[2].address, { value: toWei(0.1) }), "receiveSalePayment");
				console.log("nftsMinted", await buffer.nftsMinted());
			}
			const printOtherBalances = async () => {
				console.log("Pooled balances:");
				console.log("coreTeamBalance", fromWei(await buffer.coreTeamBalance()));
				console.log("allArtistsBalance", fromWei(await buffer.allArtistsBalance()));
				console.log("allHoldersBalance", fromWei(await buffer.allHoldersBalance()));
			}
			const printEarningsAndDonationAmt = async (msg) => {
				console.log(msg);
				await printOtherBalances();
				await Promise.all(coreTeam.map(async (teamMember, i) => {
					const amt = parseFloat(fromWei(await buffer.viewEarnings(teamMember.address)));
					console.log(`viewEarnings(coreTeam[${i}])`, amt);
				}));
				await Promise.all(artists.map(async (artist, i) => {
					const amt = parseFloat(fromWei(await buffer.viewEarnings(artist.address)));
					console.log(`viewEarnings(artist[${i}])`, amt);
				}));
				await Promise.all(buyers.map(async (buyer, i) => {
					const amt = parseFloat(fromWei(await buffer.viewDonationAmt(buyer.address)));
					console.log(`viewDonationAmt(buyer[${i}])`, amt);
				}));
			}
			const withdrawAndDonate = async () => {
				console.log("Withdraw and donate all shares except for the owner's");
				await Promise.all(coreTeam.map(async (teamMember, i) => {
					const amt = parseFloat(fromWei(await buffer.viewEarnings(teamMember.address)));
					if (amt > 0) {
						await runTxAndPrintGasFee(buffer.connect(teamMember).withdraw(), `withdraw(coreTeam[${i}])`);
					}
				}));
				await Promise.all(artists.map(async (artist, i) => {
					const amt = parseFloat(fromWei(await buffer.viewEarnings(artist.address)));
					if (amt > 0) {
						await runTxAndPrintGasFee(buffer.connect(artist).withdraw(), `withdraw(artist[${i}])`);
					}
				}));
				await Promise.all(buyers.map(async (buyer, i) => {
					const amt = parseFloat(fromWei(await buffer.viewDonationAmt(buyer.address)));
					if (amt > 0) {
						await runTxAndPrintGasFee(buffer.connect(buyer).holderDonate(donateTo.address), `holderDonate(buyer[${i}])`);
					}
				}));
			}

			await initCoreTeamAndArtists();
			// await printEarningsAndDonationAmt("Initial Earnings and Donation Amt");
			await mintsAndSales();
			await printEarningsAndDonationAmt("Earnings and Donation Amt after 4 mints and 1 sale");
			await withdrawAndDonate();
			await printEarningsAndDonationAmt("Earnings and Donation Amt after withdraw and donate");

			// console.log("donateTo.balance", fromWei(await donateTo.getBalance()));

			await Promise.all(signers.map(async ({ address }, i) => {
				console.log(`totalWithdrawn(address[${i}])`, fromWei(await buffer.totalWithdrawn(address)));
				console.log(`totalDonated(address[${i}])`, fromWei(await buffer.totalDonated(address)));
				// console.log(`viewEarnings(address[${i}])`, fromWei(await buffer.viewEarnings(address)), address);
				// console.log(`viewDonationAmt(address[${i}])`, fromWei(await buffer.viewDonationAmt(address)), address);
				// const earnings = parseFloat(fromWei(await buffer.viewEarnings(address)));
				// expect(earnings, `earnings[${i}]`).to.equal(0);
				// const donationAmt = parseFloat(fromWei(await buffer.viewDonationAmt(address)));
				// expect(donationAmt, `donationAmt[${i}]`).to.equal(0);
			}));
		});
	});
});